#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

###########################################################################
#                         jvm17-server.options                            #
#                                                                         #
# See jvm-server.options. This file is specific for Java 17 and newer.    #
###########################################################################

#################
#  GC SETTINGS  #
#################

<% if node['axonops']['cassandra']['gc_type'] == 'G1GC' -%>
### G1 Settings
## Use the Hotspot garbage-first collector.
-XX:+UseG1GC
-XX:+ParallelRefProcEnabled
-XX:MaxTenuringThreshold=<%= node['axonops']['cassandra']['gc_g1_max_tenuring_threshold'] %>
-XX:G1HeapRegionSize=<%= node['axonops']['cassandra']['gc_g1_heap_region_size'] %>

# Floor the young generation size to 50% of the heap size
-XX:+UnlockExperimentalVMOptions
-XX:G1NewSizePercent=<%= node['axonops']['cassandra']['gc_g1_new_size_percent'] %>

# Have the JVM do less remembered set work during STW, instead
# preferring concurrent GC. Reduces p99.9 latency.
-XX:G1RSetUpdatingPauseTimePercent=<%= node['axonops']['cassandra']['gc_g1_rset_updating_pause_time_percent'] %>

# Main G1GC tunable: lowering the pause target will lower throughput and vise versa.
# 200ms is the JVM default and lowest viable setting
# 1000ms increases throughput. Keep it smaller than the timeouts in cassandra.yaml.
-XX:MaxGCPauseMillis=<%= node['axonops']['cassandra']['gc_g1_max_pause_millis'] %>

## Optional G1 Settings
# Save CPU time on large (>= 16GB) heaps by delaying region scanning
# until the heap is 70% full. The default in Hotspot 8u40 is 40%.
-XX:InitiatingHeapOccupancyPercent=<%= node['axonops']['cassandra']['gc_g1_initiating_heap_occupancy_percent'] %>
<% elsif node['axonops']['cassandra']['gc_type'] == 'Shenandoah' -%>
### Shenandoah Settings
## Use the Shenandoah low-pause-time garbage collector
-XX:+UseShenandoahGC

# Shenandoah GC heuristics mode
-XX:ShenandoahGCHeuristics=<%= node['axonops']['cassandra']['gc_shenandoah_heuristics'] %>

# Initial and minimum free thresholds
-XX:ShenandoahInitFreeThreshold=<%= node['axonops']['cassandra']['gc_shenandoah_init_free_threshold'] %>
-XX:ShenandoahMinFreeThreshold=<%= node['axonops']['cassandra']['gc_shenandoah_min_free_threshold'] %>

# Guaranteed GC interval
-XX:ShenandoahGuaranteedGCInterval=<%= node['axonops']['cassandra']['gc_shenandoah_guaranteed_gc_interval'] %>

<% if node['axonops']['cassandra']['gc_shenandoah_region_size'] -%>
# Shenandoah heap region size
-XX:ShenandoahRegionSize=<%= node['axonops']['cassandra']['gc_shenandoah_region_size'] %>
<% end -%>

<% if node['axonops']['cassandra']['gc_shenandoah_pacing'] -%>
# Enable GC pacing
-XX:+ShenandoahPacing
-XX:ShenandoahPacingMaxDelay=<%= node['axonops']['cassandra']['gc_shenandoah_pacing_max_delay'] %>
<% end -%>

# NUMA support (recommended for Shenandoah)
<% if node['axonops']['cassandra']['gc_use_numa'] -%>
-XX:+UseNUMA
<% end -%>

# Transparent Huge Pages support
<% if node['axonops']['cassandra']['gc_use_transparent_huge_pages'] -%>
-XX:+UseTransparentHugePages
<% end -%>
<% end -%>

# For systems with > 8 cores, the default ParallelGCThreads is 5/8 the number of logical cores.
# Otherwise equal to the number of cores when 8 or less.
# Machines with > 10 cores should try setting these to <= full cores.
# By default, ConcGCThreads is 1/4 of ParallelGCThreads.
# Setting both to the same value can reduce STW durations.
# When leaving both unset then cassandra-env.sh will set them both to the number of your cores.
<% if node['axonops']['cassandra']['gc_type'] == 'G1GC' -%>
<% if node['axonops']['cassandra']['gc_parallel_threads'] -%>
-XX:ParallelGCThreads=<%= node['axonops']['cassandra']['gc_parallel_threads'] %>
<% else -%>
#-XX:ParallelGCThreads=16
<% end -%>
<% if node['axonops']['cassandra']['gc_conc_threads'] -%>
-XX:ConcGCThreads=<%= node['axonops']['cassandra']['gc_conc_threads'] %>
<% else -%>
#-XX:ConcGCThreads=16
<% end -%>
<% elsif node['axonops']['cassandra']['gc_type'] == 'Shenandoah' -%>
<% if node['axonops']['cassandra']['gc_shenandoah_parallel_gc_threads'] -%>
-XX:ParallelGCThreads=<%= node['axonops']['cassandra']['gc_shenandoah_parallel_gc_threads'] %>
<% end -%>
<% if node['axonops']['cassandra']['gc_shenandoah_conc_gc_threads'] -%>
-XX:ConcGCThreads=<%= node['axonops']['cassandra']['gc_shenandoah_conc_gc_threads'] %>
<% end -%>
<% end -%>

### JPMS

-Djdk.attach.allowAttachSelf=true
--add-exports java.base/jdk.internal.misc=ALL-UNNAMED
--add-exports java.management.rmi/com.sun.jmx.remote.internal.rmi=ALL-UNNAMED
--add-exports java.management/com.sun.jmx.remote.security=ALL-UNNAMED
--add-exports java.rmi/sun.rmi.registry=ALL-UNNAMED
--add-exports java.rmi/sun.rmi.server=ALL-UNNAMED
--add-exports java.sql/java.sql=ALL-UNNAMED
--add-exports java.base/java.lang.ref=ALL-UNNAMED
--add-exports jdk.unsupported/sun.misc=ALL-UNNAMED

--add-opens java.base/java.lang.module=ALL-UNNAMED
--add-opens java.base/jdk.internal.loader=ALL-UNNAMED
--add-opens java.base/jdk.internal.ref=ALL-UNNAMED
--add-opens java.base/jdk.internal.reflect=ALL-UNNAMED
--add-opens java.base/jdk.internal.math=ALL-UNNAMED
--add-opens java.base/jdk.internal.module=ALL-UNNAMED
--add-opens java.base/jdk.internal.util.jar=ALL-UNNAMED
--add-opens jdk.management/com.sun.management.internal=ALL-UNNAMED
--add-opens java.base/sun.nio.ch=ALL-UNNAMED
--add-opens java.base/java.io=ALL-UNNAMED
--add-opens java.base/java.lang.reflect=ALL-UNNAMED
--add-opens java.base/java.lang=ALL-UNNAMED
--add-opens java.base/java.util=ALL-UNNAMED
--add-opens java.base/java.nio=ALL-UNNAMED

### GC logging options -- uncomment to enable

# Java 11 (and newer) GC logging options:
# See description of https://bugs.openjdk.java.net/browse/JDK-8046148 for details about the syntax
# The following is the equivalent to -XX:+PrintGCDetails -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=10M
<% if node['axonops']['cassandra']['gc_log_enabled'] -%>
-Xlog:gc=info,heap*=trace,age*=debug,safepoint=info,promotion*=trace:file=<%= node['axonops']['cassandra']['log_dir'] %>/gc.log:time,uptime,pid,tid,level:filecount=<%= node['axonops']['cassandra']['gc_log_files'] %>,filesize=<%= node['axonops']['cassandra']['gc_log_file_size'].to_i * 1024 * 1024 %>
<% else -%>
#-Xlog:gc=info,heap*=trace,age*=debug,safepoint=info,promotion*=trace:file=/var/log/cassandra/gc.log:time,uptime,pid,tid,level:filecount=10,filesize=10485760
<% end -%>

# Notes for Java 8 migration:
#
# -XX:+PrintGCDetails                   maps to -Xlog:gc*:... - i.e. add a '*' after "gc"
# -XX:+PrintGCDateStamps                maps to decorator 'time'
#
# -XX:+PrintHeapAtGC                    maps to 'heap' with level 'trace'
# -XX:+PrintTenuringDistribution        maps to 'age' with level 'debug'
# -XX:+PrintGCApplicationStoppedTime    maps to 'safepoint' with level 'info'
# -XX:+PrintPromotionFailure            maps to 'promotion' with level 'trace'
# -XX:PrintFLSStatistics=1              maps to 'freelist' with level 'trace'

-XX:ThreadPriorityPolicy=1
-XX:StringTableSize=1000003
<% if node['axonops']['cassandra']['gc_type'] == 'G1GC' -%>
-XX:+UseG1GC
-XX:G1RSetUpdatingPauseTimePercent=5
-XX:MaxGCPauseMillis=500
-XX:InitiatingHeapOccupancyPercent=40
-XX:ParallelGCThreads=4
-XX:ConcGCThreads=4
-XX:+ParallelRefProcEnabled
<% elsif node['axonops']['cassandra']['gc_type'] == 'Shenandoah' -%>
-XX:+UseShenandoahGC
-XX:ShenandoahGCHeuristics=adaptive
<% end -%>

### Netty Options

# On Java >= 9 Netty requires the io.netty.tryReflectionSetAccessible system property to be set to true to enable
# creation of direct buffers using Unsafe. Without it, this falls back to ByteBuffer.allocateDirect which has
# inferior performance and risks exceeding MaxDirectMemory
-Dio.netty.tryReflectionSetAccessible=true

# Revert changes in defaults introduced in https://netty.io/news/2022/03/10/4-1-75-Final.html
-Dio.netty.allocator.useCacheForAllThreads=true
-Dio.netty.allocator.maxOrder=11

# The newline in the end of file is intentional
